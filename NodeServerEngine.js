// The NodeServerEngine  class is used to generate node/express/mongo code
// that utilizes Mongo in standard CRUD endpoints
// It takes its guidance from a well-formed structure.json file

module.exports = class NodeServerEngine {
	// Top level Express Generation
	generate(data) {
		return this.generateTopCode(data)
			+ this.generateEndpoints(data)
			+ this.generateBottomCode(data)
		;
	}

	// Generates header information
	// includes, definitions, that sort of thing
	generateTopCode(data) {
		let nodeCode = "";
		nodeCode += "// This file was generated by MongoGen.js\n\n";
		nodeCode += "// Express handles routing and other middleware\n";
		nodeCode += "const express = require('express');\n";
		nodeCode += "const app = express();\n\n";

		nodeCode += "// body-parser handles parsing of request bodies\n";
		nodeCode += "const bodyParser = require('body-parser');\n";
		nodeCode += "app.use(bodyParser.json());\n\n";

		nodeCode += "// the database front end is mostly static\n";
		nodeCode += "app.use(express.static('html'))\n";

		nodeCode += "// Mongo is a document-based database\n";
		nodeCode += "var MongoClient = require('mongodb').MongoClient;\n";
		nodeCode += "var ObjectID = require('mongodb').ObjectID;\n";
		nodeCode += "var db;\n\n";

		nodeCode += "// Connect to the db\n";
		nodeCode += `MongoClient.connect('${data.mongoProperties.serverName}', (err, client) => {\n`;
    	nodeCode += "    if (err) { return console.log(err); }\n";
    	nodeCode += `    db = client.db('${data.mongoProperties.collectionName}');\n\n`;

		return nodeCode;
	}

	// Generates 5 CRUD endpoints for each described model
	generateEndpoints(data) {
		let nodeCode = "    // handlers\n";
		for (const model of data.modelList) {
			nodeCode += this.generatePost(model);
			nodeCode += this.generateGetList(model);
			nodeCode += this.generateGetDetail(model);
			nodeCode += this.generateUpdate(model);
			nodeCode += this.generatePatch(model);
			nodeCode += this.generateDelete(model);
		}
		return nodeCode;
	}

	// Create
	generatePost(model) {
		let nodeCode = "";
		nodeCode += `    // POST - ${model.name}\n`;
		nodeCode += `    app.post('/${model.endpoint}', (req, res) => {\n`;
		nodeCode += "        // Adding _isActive, setting to true, to support soft delete\n";
		nodeCode += "        req.body['_isActive'] = true;\n";
		nodeCode += `        db.collection('${model.modelName}')\n`;
		nodeCode += "            .insertOne(req.body, (err, results) => {res.json(results)}\n";
		nodeCode += "    )});\n\n";
		return nodeCode;
	}

	// Read List
	generateGetList(model) {
		let nodeCode = "";
		nodeCode += `    // GET (list) - ${model.name}\n`;
		nodeCode += `    app.get('/${model.endpoint}', (req, res) => {\n`;
		nodeCode += "        // constraining to isActive = true to support soft delete\n";
		nodeCode += `        db.collection('${model.modelName}')\n`;
		nodeCode += "            .find({'_isActive': true})\n";
		nodeCode += "            .toArray( (err, results) => {res.json(results)}\n";
		nodeCode += "    )});\n\n";
		return nodeCode;
	}

	// Read Detail
	generateGetDetail(model) {
		let nodeCode = "";
    	nodeCode += `    // GET (detail) - ${model.name}\n`;
    	nodeCode += `    app.get('/${model.endpoint}/:_id', (req, res) => {\n`;
       	nodeCode += `        db.collection('${model.modelName}').findOne({\n`;
		nodeCode += "            '_id\': ObjectID(req.params._id),\n";
		nodeCode += "            // constraining to isActive = true to support soft delete\n";
		nodeCode += "            '_isActive': true\n";
		nodeCode += "        }, (err, results) => {res.json(results)}\n";
		nodeCode += "    )});\n\n";
		return nodeCode;
	}

	// Update -- Replace document
	generateUpdate(model) {
		let get = '{"_id": ObjectID(req.params._id)}';
		let set = "req.body";
		let nodeCode = "";
    	nodeCode += `    // PUT - ${model.name}\n`;
		nodeCode += `    app.put('/${model.endpoint}/:_id', (req, res) => {\n`;
		nodeCode += `        db.collection('${model.modelName}').replaceOne(\n`;
		nodeCode += `            ${get},\n`;
		nodeCode += `            ${set},\n`;
		nodeCode += "            (err, results) => {res.json(results)}\n";
		nodeCode += "    )});\n\n";
		return nodeCode;
	}

	// Update -- Patch document
	generatePatch(model) {
		let get = '{"_id": ObjectID(req.params._id)}';
		let set = "{$set: req.body}";
		let nodeCode = "";
    	nodeCode += `    // PATCH - ${model.name}\n`;
		nodeCode += `    app.patch('/${model.endpoint}/:_id', (req, res) => {\n`;
		nodeCode += `        db.collection('${model.modelName}').updateOne(\n`;
		nodeCode += `            ${get},\n`;
		nodeCode += `            ${set},\n`;
		nodeCode += "            (err, results) => {res.json(results)}\n";
		nodeCode += "    )});\n\n";
		return nodeCode;
	}

	// Delete
	generateDelete(model) {
		let get = '{"_id": ObjectID(req.params._id)}';
		let set = '{$set: {"_isActive": false}}';
		let nodeCode = "";
    	nodeCode += `    // DELETE - ${model.name}\n`;
		nodeCode += "    // To support soft delete, we're just updating _isActive\n";
		nodeCode += `    app.delete('/${model.endpoint}/:_id', (req, res) => {\n`;
		nodeCode += `        db.collection('${model.modelName}').updateOne(\n`;
		nodeCode += `            ${get},\n`;
		nodeCode += `            ${set},\n`;
		nodeCode += "            (err, results) => {res.json(results)}\n";
		nodeCode += "    )});\n\n";
		return nodeCode;
	}

	// Generates the code at the end of the file.
	// Sets up the listener
	generateBottomCode(data) {
		let nodeCode = "";
		nodeCode += "    app.listen(" + data.nodeProperties.serverPort
			+ ", () => console.log('app started on port "
			+ data.nodeProperties.serverPort + "'));\n";
		nodeCode += "});\n";
		return nodeCode;
	}
};
