// The NodeServerEngine  class is used to generate node/express/mongo code
// that utilizes Mongo in standard CRUD endpoints
module.exports = class NodeServerEngine {
	//////////////////////////////////
	// Top level Express Generation //
	//////////////////////////////////
	generate(data) {
		return this.generateTopCode(data)
			+ this.generateEndpoints(data)
			+ this.generateBottomCode(data)
		;
	}

	/////////////////////////////////
	// generate header information //
	/////////////////////////////////
	generateTopCode(data) {
		return `\
// This file was generated by MongoGen.js\n\n\
// Express handles routing and other middleware\n\
const express = require('express');\n\
const app = express();\n\
\n\
// body-parser handles parsing of request bodies\n\
const bodyParser = require('body-parser');\n\
app.use(bodyParser.json());\n\
// the database front end is mostly static\n\
app.use(express.static('html'))\n\
\n\
// Mongo is a document-based database\n\
var MongoClient = require('mongodb').MongoClient;\n\
var ObjectID = require('mongodb').ObjectID;\n\
var db;\n\
\n\
// Connect to the db\n\
MongoClient.connect('${data.mongoProperties.serverName}', (err, client) => {\n\
    if (err) { return console.log(err); }\n\
    db = client.db('${data.mongoProperties.collectionName}');\n\
`;

	}

	////////////////////////
	// generate endpoints //
	////////////////////////
	generateEndpoints(data) {
		let nodeCode = "\n    // handlers\n";
		for (const model of data.modelList) {
			nodeCode += this.generatePost(model);
			nodeCode += this.generateGetList(model);
			nodeCode += this.generateGetDetail(model);
			nodeCode += this.generateUpdate(model);
			nodeCode += this.generateDelete(model);
		}
		return nodeCode;
	}

	////////////
	// Create //
	////////////
	generatePost(model) {
	return `\
	// POST - ${model.name}\n\
	app.post('/${model.endpoint}', (req, res) => {\n\
    	// Adding _isActive, setting to true, to support soft delete\n\
    	req.body['_isActive'] = true;\n\
    	db.collection('${model.modelName}').insertOne(req.body, (err, results) => {\n\
			res.json(results)\n\
		});\n\
	});\n\n\
`;
	}

	///////////////
	// Read List //
	///////////////
	generateGetList(model) {
	return `\
	// GET (list) - ${model.name}\n\
	app.get('/${model.endpoint}', (req, res) => {\n\
		// constraining to isActive = true to support soft delete\n\
		db.collection('${model.modelName}').find({"_isActive": true}).toArray( (err, results) => {\n\
			res.json(results)\n\
		});\n\
	});\n\n\
`;
	}

	/////////////////
	// Read Detail //
	/////////////////
	generateGetDetail(model) {
	return `\
    // GET (detail) - ${model.name}\n\
    app.get('/${model.endpoint}/:_id', (req, res) => {\n\
        db.collection('${model.modelName}').findOne({\
			"_id\": ObjectID(req.params._id),\n\
			// constraining to isActive = true to support soft delete\n\
			"_isActive": true\n\
		}, (err, results) => {\n\
            res.json(results)\n\
        });\n\
    });\n\n\
`;
	}

	////////////
	// Update //
	////////////
	generateUpdate(model) {
	let get = '{"_id": ObjectID(req.params._id)}';
	let set = "{$set: req.body}";
	return `\
    // PUT - ${model.name}\n\
	app.put('/${model.endpoint}/:_id', (req, res) => {\n\
		db.collection('${model.modelName}').updateOne(${get}, ${set}, (err, results) => {\n\
			res.json(results)\n\
		});\n\
	});\n\n\
`;
	}

	////////////
	// Delete //
	////////////
	generateDelete(model) {
	let get = '{"_id": ObjectID(req.params._id)}';
	let set = '{$set: {"_isActive": false}}';
	return `\
    // DELETE - ${model.name}\n\
	// To support soft delete, we're just updating _isActive
	app.delete('/${model.endpoint}/:_id', (req, res) => {\n\
		db.collection('${model.modelName}').updateOne(
			${get},\n\
			${set},\n\
			(err, results) => {res.json(results)}\n\
		);\n\
	});\n\n\
`;
	}

	generateBottomCode(data) {
		let nodeCode = "";
		nodeCode += "    app.listen(" + data.nodeProperties.serverPort
			+ ", () => console.log('app started on port "
			+ data.nodeProperties.serverPort + "'));\n";
		nodeCode += "});\n";
		return nodeCode;
	}
};
